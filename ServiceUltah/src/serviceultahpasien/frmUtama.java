/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serviceultahpasien;

import AESsecurity.EnkripsiAES;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.koneksiDB;
import fungsi.koneksiDBWa;
import fungsi.sekuel;
import fungsi.akses;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Timer;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;


/**
 *
 * @author windiartonugroho
 */
public class frmUtama extends javax.swing.JFrame {
    private  Connection koneksi=koneksiDB.condb();
    private  Connection koneksiwa;
    private  sekuel Sequel=new sekuel();
    private  String requestJson,URL="",utc="",link="",datajam="",
              nol_jam = "",nol_menit = "",nol_detik = "",jam="",menit="",detik="",hari="",noresep="",task3="",task4="",task5="",task6="",task7="",task99="",
              kodepoli="",kodedokter="",kodebpjs=Sequel.cariIsi("select password_asuransi.kd_pj from password_asuransi");        
    private  HttpHeaders headers;
    private  HttpEntity requestEntity;
    private  ObjectMapper mapper= new ObjectMapper();
    private  JsonNode root;
    private  JsonNode nameNode;
    private  PreparedStatement ps,ps2,ps3,psWa;
    private  ResultSet rs,rs2,rs3;
    private  Calendar cal = Calendar.getInstance();
    private  int day = cal.get(Calendar.DAY_OF_WEEK);
    private  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private  SimpleDateFormat tanggalFormat = new SimpleDateFormat("yyyy-MM-dd");
    private  Date parsedDate;
    private  Date date = new Date();  

    /**
     * Creates new form frmUtama
     */
    public frmUtama() {
        initComponents();  
        
        this.setSize(390,340);
        
        date = new Date();  
        Tanggal1.setText(tanggalFormat.format(date)); 
        Tanggal2.setText(tanggalFormat.format(date)); 
        jam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Tanggal1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Tanggal2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Service Mobile JKN");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane1.setViewportView(TeksArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Tanggal :");
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel1.add(jLabel1);

        Tanggal1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal1);

        jLabel3.setText("s.d.");
        jLabel3.setPreferredSize(new java.awt.Dimension(28, 23));
        jPanel1.add(jLabel3);

        Tanggal2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal2);

        jLabel2.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jLabel2);

        jButton1.setText("Keluar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Tanggal1;
    private javax.swing.JTextField Tanggal2;
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void jam(){
        ActionListener taskPerformer = new ActionListener(){
            private int nilai_jam;
            private int nilai_menit;
            private int nilai_detik;
            public void actionPerformed(ActionEvent e) {
                nol_jam = "";
                nol_menit = "";
                nol_detik = "";
                Date now = Calendar.getInstance().getTime();
                // Mengambil nilaj JAM, MENIT, dan DETIK Sekarang
                nilai_jam = now.getHours();
                nilai_menit = now.getMinutes();
                nilai_detik = now.getSeconds();
                // Jika nilai JAM lebih kecil dari 10 (hanya 1 digit)
                if (nilai_jam <= 9) {
                    // Tambahkan "0" didepannya
                    nol_jam = "0";
                }
                // Jika nilai MENIT lebih kecil dari 10 (hanya 1 digit)
                if (nilai_menit <= 9) {
                    // Tambahkan "0" didepannya
                    nol_menit = "0";
                }
                // Jika nilai DETIK lebih kecil dari 10 (hanya 1 digit)
                if (nilai_detik <= 9) {
                    // Tambahkan "0" didepannya
                    nol_detik = "0";
                }
                // Membuat String JAM, MENIT, DETIK
                jam = nol_jam + Integer.toString(nilai_jam);
                menit = nol_menit + Integer.toString(nilai_menit);
                detik = nol_detik + Integer.toString(nilai_detik);
                if(jam.equals("01")&&menit.equals("01")&&detik.equals("01")){
                    TeksArea.setText("");
                    date = new Date();  
                    Tanggal1.setText(tanggalFormat.format(date)); 
                    Tanggal2.setText(tanggalFormat.format(date)); 
                }
                if(detik.equals("01")&&((nilai_menit%5)==0)){
                    day=cal.get(Calendar.DAY_OF_WEEK);
                    switch (day) {
                        case 1:
                            hari="AKHAD";
                            break;
                        case 2:
                            hari="SENIN";
                            break;
                        case 3:
                            hari="SELASA";
                            break;
                        case 4:
                            hari="RABU";
                            break;
                        case 5:
                            hari="KAMIS";
                            break;
                        case 6:
                            hari="JUMAT";
                            break;
                        case 7:
                            hari="SABTU";
                            break;
                        default:
                            break;
                    }
                    
                                        
                    try {                 
                        koneksiwa = koneksiDBWa.condb();
                        String waktukirim = java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                        String nohppasien = "";  //ubah format nomor hp pasien
                        String jk = "";  //ubah format jenis kelamin
                        
                        Connection connPasien = koneksiDB.condb();
                        PreparedStatement ps = connPasien.prepareStatement(
                        "SELECT no_rkm_medis, nm_pasien, no_tlp, jk, DATE_FORMAT(tgl_lahir, '%d-%m') AS tgl_lahir, " +
                        "TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()) AS usia " +
                        "FROM pasien " +
                        "WHERE DATE_FORMAT(tgl_lahir, '%m-%d') = DATE_FORMAT(CURDATE(), '%m-%d')"
                        );
                        ResultSet rs = ps.executeQuery();

                        while(rs.next()){
                            nohppasien = rs.getString("no_tlp");
                            jk = rs.getString("jk");
                            System.out.println("Nomor HP ditemukan: " + nohppasien);
                            System.out.println("Jenis Kelamin ditemukan: " + jk);
                            
                            // **Validation: Ensure the phone number is valid**
                            if (nohppasien == null || nohppasien.trim().isEmpty() || nohppasien.length() < 10 || !nohppasien.trim().matches("\\d+")) {                            
                            System.out.println("Nomor HP tidak valid untuk pasien: " + rs.getString("nm_pasien"));
                            continue; // 
                            }
                            
                        // Pastikan nomor telepon memiliki format yang benar
                            if (nohppasien == null || nohppasien.trim().isEmpty()) {
                             System.out.println("Nomor telepon pasien kosong!");
                            } else if (nohppasien.startsWith("0")) {
                              nohppasien = "62" + nohppasien.substring(1);
                             System.out.println("Nomor telepon setelah konversi: " + nohppasien);
                         }                               
                           
                            
                            // ========== 🆕 Tambahkan greeting berdasarkan waktu saat ini ==========
                            int currentHour = java.time.LocalTime.now().getHour(); // 🆕 Ambil jam saat ini

                            String greeting; // 🆕 Variabel untuk menyimpan greeting
                            if (currentHour >= 4 && currentHour <= 10) {
                            greeting = "Selamat Pagi"; // 🆕 Pagi (04.00 - 10.00)
                            } else if (currentHour >= 10 && currentHour <= 15) {
                            greeting = "Selamat Siang"; // 🆕 Siang (10.01 - 15.00)
                            } else if (currentHour >= 15 && currentHour <= 18) {
                            greeting = "Selamat Sore"; // 🆕 Sore (15.01 - 18.00)
                            } else {
                            greeting = "Selamat Malam"; // 🆕 Malam (18.01 - 03.59)
                        }
    
                        // ========== 🆕 Gunakan greeting ini ke dalam salam pembuka ==========
                        String salampembuka;
                        if ("L".equalsIgnoreCase(jk)) {
                            salampembuka = greeting + ", Bpk " + rs.getString("nm_pasien") + "\n"; // 🆕 Tambahkan greeting sebelum Bpk
                        } else if ("P".equalsIgnoreCase(jk)) {
                            salampembuka = greeting + ", Ibu " + rs.getString("nm_pasien") + "\n"; // 🆕 Tambahkan greeting sebelum Ibu
                        } else {
                            salampembuka = greeting + ", Bpk / Ibu " + rs.getString("nm_pasien") + "\n"; // 🆕 Jika gender tidak diketahui
                        }
                        
                          

                        String pesan = salampembuka + " - Selamat ulang tahun yang ke " + rs.getString("usia") + " Tahun  \n 0xF0 0x9F 0x91 0x8B  0xF0 0x9F 0x98 0x8A \n \n" +
                           "Semoga selalu sehat dan bahagia.";

                       // rs.close();
                       // ps.close();
            
// Insert into wa_outbox
    try {
        String sql = "INSERT INTO wa_outbox (NOMOR, NOWA, PESAN, TANGGAL_JAM, STATUS, SOURCE, SENDER, SUCCESS, RESPONSE, REQUEST, TYPE, FILE) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        PreparedStatement psWa = koneksiwa.prepareStatement(sql);
        psWa.setLong(1, 0);
        psWa.setString(2, nohppasien + "@c.us");
        psWa.setString(3, pesan);
        psWa.setString(4, waktukirim);
        psWa.setString(5, "ANTRIAN");
        psWa.setString(6, "KHANZA");
        psWa.setString(7, "NODEJS");
        psWa.setString(8, "");
        psWa.setString(9, "");
        psWa.setString(10, "");
        psWa.setString(11, "TEXT");
        psWa.setString(12, "");
        psWa.executeUpdate();
        
    } catch (Exception et) {
        System.out.println("Gagal mengirim pesan WA ke Pasien: " + et);
    }
            
            
            System.out.println("Pesan ulang tahun untuk " + rs.getString("nm_pasien") + " telah dimasukkan ke wa_outbox.");
        }

        rs.close();
        ps.close();

} catch (Exception es) {
    System.out.println("Error kirim ulang tahun: " + es.getMessage());
}

                }
            }
        };
        // Timer
        new Timer(10, taskPerformer).start();
    }
}
